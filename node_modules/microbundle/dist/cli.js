#!/usr/bin/env node
function e(e){return e&&"object"==typeof e&&"default"in e?e.default:e}var n=e(require("sade")),t=e(require("./microbundle.js")),o=require("../package").version,i=n("microbundle"),r=function(e){return Array.isArray(e)?e:null==e?[]:[e]};function c(e,n,o){n.watch=!!o,n.entries=r(e||n.entry).concat(n._),t(n).then(function(e){null!=e&&process.stdout.write(e+"\n"),n.watch||process.exit(0)}).catch(function(e){process.stderr.write(String(e)+"\n"),process.exit(e.code||1)})}i.version(o).option("--entry, -i","Entry module(s)").option("--output, -o","Directory to place build files into").option("--format, -f","Only build specified formats","es,cjs,umd").option("--target","Specify your target environment","node").option("--external","Specify external dependencies, or 'all'").option("--compress","Compress output using UglifyJS",!0).option("--strict",'Enforce undefined global context and add "use strict"').option("--name","Specify name exposed in UMD builds").option("--cwd","Use an alternative working directory",".").option("--sourcemap","Generate source map",!0),i.command("build [...entries]","",{default:!0}).describe("Build once and exit").action(c),i.command("watch [...entries]").describe("Rebuilds on any change").action(function(e,n){return c(e,n,!0)}),i.parse(process.argv,{alias:{o:["output","d"],i:["entry","entries","e"]}});
//# sourceMappingURL=cli.js.map
